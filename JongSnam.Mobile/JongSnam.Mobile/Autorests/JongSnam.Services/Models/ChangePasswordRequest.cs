// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JongSnamServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ChangePasswordRequest
    {
        /// <summary>
        /// Initializes a new instance of the ChangePasswordRequest class.
        /// </summary>
        public ChangePasswordRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChangePasswordRequest class.
        /// </summary>
        public ChangePasswordRequest(string oldPassword, string newPassword, string confirmNewPassword)
        {
            OldPassword = oldPassword;
            NewPassword = newPassword;
            ConfirmNewPassword = confirmNewPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "oldPassword")]
        public string OldPassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "newPassword")]
        public string NewPassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "confirmNewPassword")]
        public string ConfirmNewPassword { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OldPassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OldPassword");
            }
            if (NewPassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NewPassword");
            }
            if (ConfirmNewPassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConfirmNewPassword");
            }
            if (OldPassword != null)
            {
                if (OldPassword.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "OldPassword", 20);
                }
                if (OldPassword.Length < 8)
                {
                    throw new ValidationException(ValidationRules.MinLength, "OldPassword", 8);
                }
            }
            if (NewPassword != null)
            {
                if (NewPassword.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NewPassword", 20);
                }
                if (NewPassword.Length < 8)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NewPassword", 8);
                }
            }
            if (ConfirmNewPassword != null)
            {
                if (ConfirmNewPassword.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ConfirmNewPassword", 20);
                }
                if (ConfirmNewPassword.Length < 8)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ConfirmNewPassword", 8);
                }
            }
        }
    }
}
