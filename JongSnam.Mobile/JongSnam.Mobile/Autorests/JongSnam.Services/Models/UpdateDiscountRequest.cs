// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JongSnamService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UpdateDiscountRequest
    {
        /// <summary>
        /// Initializes a new instance of the UpdateDiscountRequest class.
        /// </summary>
        public UpdateDiscountRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateDiscountRequest class.
        /// </summary>
        public UpdateDiscountRequest(System.DateTime startDate, System.DateTime endDate, double percentage, string detail = default(string), int? id = default(int?))
        {
            StartDate = startDate;
            EndDate = endDate;
            Percentage = percentage;
            Detail = detail;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public System.DateTime EndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "percentage")]
        public double Percentage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detail")]
        public string Detail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Percentage > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Percentage", 100);
            }
            if (Percentage < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Percentage", 0);
            }
            if (Detail != null)
            {
                if (Detail.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Detail", 50);
                }
            }
        }
    }
}
