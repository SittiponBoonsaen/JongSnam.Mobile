// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JongSnamService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UpdateFieldRequest
    {
        /// <summary>
        /// Initializes a new instance of the UpdateFieldRequest class.
        /// </summary>
        public UpdateFieldRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateFieldRequest class.
        /// </summary>
        public UpdateFieldRequest(int storeId, string name, string size, int price, bool? isOpen = default(bool?), bool? active = default(bool?), UpdateDiscountRequest updateDiscountRequest = default(UpdateDiscountRequest), IList<UpdatePictureFieldRequest> updatePictureFieldRequest = default(IList<UpdatePictureFieldRequest>))
        {
            StoreId = storeId;
            Name = name;
            Size = size;
            Price = price;
            IsOpen = isOpen;
            Active = active;
            UpdateDiscountRequest = updateDiscountRequest;
            UpdatePictureFieldRequest = updatePictureFieldRequest;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storeId")]
        public int StoreId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public string Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public int Price { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOpen")]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updateDiscountRequest")]
        public UpdateDiscountRequest UpdateDiscountRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatePictureFieldRequest")]
        public IList<UpdatePictureFieldRequest> UpdatePictureFieldRequest { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Size == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Size");
            }
            if (Name != null)
            {
                if (Name.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 50);
                }
            }
            if (Size != null)
            {
                if (Size.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Size", 50);
                }
            }
            if (UpdateDiscountRequest != null)
            {
                UpdateDiscountRequest.Validate();
            }
            if (UpdatePictureFieldRequest != null)
            {
                foreach (var element in UpdatePictureFieldRequest)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
