// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JongSnamService
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JongSnamServices.
    /// </summary>
    public static partial class JongSnamServicesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetProvinces(this IJongSnamServices operations)
            {
                return operations.GetProvincesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProvincesAsync(this IJongSnamServices operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProvincesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetProvinceById(this IJongSnamServices operations, int id)
            {
                return operations.GetProvinceByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProvinceByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProvinceByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provinceId'>
            /// </param>
            public static object GetDistrictByProvinceId(this IJongSnamServices operations, int provinceId)
            {
                return operations.GetDistrictByProvinceIdAsync(provinceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provinceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDistrictByProvinceIdAsync(this IJongSnamServices operations, int provinceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDistrictByProvinceIdWithHttpMessagesAsync(provinceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetDistrictById(this IJongSnamServices operations, int id)
            {
                return operations.GetDistrictByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDistrictByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDistrictByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='districtId'>
            /// </param>
            public static object GetSubDistrictByDistrictId(this IJongSnamServices operations, int districtId)
            {
                return operations.GetSubDistrictByDistrictIdAsync(districtId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='districtId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubDistrictByDistrictIdAsync(this IJongSnamServices operations, int districtId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubDistrictByDistrictIdWithHttpMessagesAsync(districtId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetSubDistrictById(this IJongSnamServices operations, int id)
            {
                return operations.GetSubDistrictByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubDistrictByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubDistrictByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='password'>
            /// </param>
            public static object Login(this IJongSnamServices operations, string user = default(string), string password = default(string))
            {
                return operations.LoginAsync(user, password).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LoginAsync(this IJongSnamServices operations, string user = default(string), string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(user, password, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Logout(this IJongSnamServices operations, int? id = default(int?))
            {
                return operations.LogoutAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LogoutAsync(this IJongSnamServices operations, int? id = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateUser(this IJongSnamServices operations, UserRequest body = default(UserRequest))
            {
                return operations.CreateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateUserAsync(this IJongSnamServices operations, UserRequest body = default(UserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetEnums(this IJongSnamServices operations, string enumName = default(string), int? id = default(int?))
            {
                return operations.GetEnumsAsync(enumName, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEnumsAsync(this IJongSnamServices operations, string enumName = default(string), int? id = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnumsWithHttpMessagesAsync(enumName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startPrice'>
            /// </param>
            /// <param name='toPrice'>
            /// </param>
            /// <param name='districtId'>
            /// </param>
            /// <param name='provinceId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetFieldBySearch(this IJongSnamServices operations, double? startPrice = default(double?), double? toPrice = default(double?), int? districtId = default(int?), int? provinceId = default(int?), int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetFieldBySearchAsync(startPrice, toPrice, districtId, provinceId, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startPrice'>
            /// </param>
            /// <param name='toPrice'>
            /// </param>
            /// <param name='districtId'>
            /// </param>
            /// <param name='provinceId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFieldBySearchAsync(this IJongSnamServices operations, double? startPrice = default(double?), double? toPrice = default(double?), int? districtId = default(int?), int? provinceId = default(int?), int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldBySearchWithHttpMessagesAsync(startPrice, toPrice, districtId, provinceId, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetFieldById(this IJongSnamServices operations, int id)
            {
                return operations.GetFieldByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFieldByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetFieldByStore(this IJongSnamServices operations, int storeId, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetFieldByStoreAsync(storeId, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFieldByStoreAsync(this IJongSnamServices operations, int storeId, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFieldByStoreWithHttpMessagesAsync(storeId, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AddField(this IJongSnamServices operations, AddFieldRequest body = default(AddFieldRequest))
            {
                return operations.AddFieldAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddFieldAsync(this IJongSnamServices operations, AddFieldRequest body = default(AddFieldRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddFieldWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateField(this IJongSnamServices operations, int? id = default(int?), UpdateFieldRequest body = default(UpdateFieldRequest))
            {
                return operations.UpdateFieldAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateFieldAsync(this IJongSnamServices operations, int? id = default(int?), UpdateFieldRequest body = default(UpdateFieldRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFieldWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object DeleteField(this IJongSnamServices operations, int id)
            {
                return operations.DeleteFieldAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteFieldAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFieldWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationId'>
            /// </param>
            public static object GetPaymentByReservationId(this IJongSnamServices operations, int reservationId)
            {
                return operations.GetPaymentByReservationIdAsync(reservationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPaymentByReservationIdAsync(this IJongSnamServices operations, int reservationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentByReservationIdWithHttpMessagesAsync(reservationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetPaymentById(this IJongSnamServices operations, int id)
            {
                return operations.GetPaymentByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPaymentByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreatePayment(this IJongSnamServices operations, PaymentRequest body = default(PaymentRequest))
            {
                return operations.CreatePaymentAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreatePaymentAsync(this IJongSnamServices operations, PaymentRequest body = default(PaymentRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePaymentWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdatePayment(this IJongSnamServices operations, int? id = default(int?), UpdatePaymentRequest body = default(UpdatePaymentRequest))
            {
                return operations.UpdatePaymentAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdatePaymentAsync(this IJongSnamServices operations, int? id = default(int?), UpdatePaymentRequest body = default(UpdatePaymentRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePaymentWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetYourReservation(this IJongSnamServices operations, int userId, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetYourReservationAsync(userId, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetYourReservationAsync(this IJongSnamServices operations, int userId, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetYourReservationWithHttpMessagesAsync(userId, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GraphMonthReservation(this IJongSnamServices operations, int userId, int month, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GraphMonthReservationAsync(userId, month, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GraphMonthReservationAsync(this IJongSnamServices operations, int userId, int month, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GraphMonthReservationWithHttpMessagesAsync(userId, month, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GraphYearReservation(this IJongSnamServices operations, int userId, int year, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GraphYearReservationAsync(userId, year, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GraphYearReservationAsync(this IJongSnamServices operations, int userId, int year, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GraphYearReservationWithHttpMessagesAsync(userId, year, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='startTimeYear'>
            /// </param>
            /// <param name='startTimeMonth'>
            /// </param>
            /// <param name='startTimeDay'>
            /// </param>
            /// <param name='startTimeHour'>
            /// </param>
            /// <param name='startTimeMinute'>
            /// </param>
            /// <param name='startTimeSecond'>
            /// </param>
            /// <param name='stopTimeYear'>
            /// </param>
            /// <param name='stopTimeMonth'>
            /// </param>
            /// <param name='stopTimeDay'>
            /// </param>
            /// <param name='stopTimeHour'>
            /// </param>
            /// <param name='stopTimeMinute'>
            /// </param>
            /// <param name='stopTimeSecond'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='storeName'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetReservationBySearch(this IJongSnamServices operations, int? userId = default(int?), int? startTimeYear = default(int?), int? startTimeMonth = default(int?), int? startTimeDay = default(int?), int? startTimeHour = default(int?), int? startTimeMinute = default(int?), int? startTimeSecond = default(int?), int? stopTimeYear = default(int?), int? stopTimeMonth = default(int?), int? stopTimeDay = default(int?), int? stopTimeHour = default(int?), int? stopTimeMinute = default(int?), int? stopTimeSecond = default(int?), string userName = default(string), string storeName = default(string), int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetReservationBySearchAsync(userId, startTimeYear, startTimeMonth, startTimeDay, startTimeHour, startTimeMinute, startTimeSecond, stopTimeYear, stopTimeMonth, stopTimeDay, stopTimeHour, stopTimeMinute, stopTimeSecond, userName, storeName, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='startTimeYear'>
            /// </param>
            /// <param name='startTimeMonth'>
            /// </param>
            /// <param name='startTimeDay'>
            /// </param>
            /// <param name='startTimeHour'>
            /// </param>
            /// <param name='startTimeMinute'>
            /// </param>
            /// <param name='startTimeSecond'>
            /// </param>
            /// <param name='stopTimeYear'>
            /// </param>
            /// <param name='stopTimeMonth'>
            /// </param>
            /// <param name='stopTimeDay'>
            /// </param>
            /// <param name='stopTimeHour'>
            /// </param>
            /// <param name='stopTimeMinute'>
            /// </param>
            /// <param name='stopTimeSecond'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='storeName'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReservationBySearchAsync(this IJongSnamServices operations, int? userId = default(int?), int? startTimeYear = default(int?), int? startTimeMonth = default(int?), int? startTimeDay = default(int?), int? startTimeHour = default(int?), int? startTimeMinute = default(int?), int? startTimeSecond = default(int?), int? stopTimeYear = default(int?), int? stopTimeMonth = default(int?), int? stopTimeDay = default(int?), int? stopTimeHour = default(int?), int? stopTimeMinute = default(int?), int? stopTimeSecond = default(int?), string userName = default(string), string storeName = default(string), int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReservationBySearchWithHttpMessagesAsync(userId, startTimeYear, startTimeMonth, startTimeDay, startTimeHour, startTimeMinute, startTimeSecond, stopTimeYear, stopTimeMonth, stopTimeDay, stopTimeHour, stopTimeMinute, stopTimeSecond, userName, storeName, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetShowDetailYourReservation(this IJongSnamServices operations, int id)
            {
                return operations.GetShowDetailYourReservationAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetShowDetailYourReservationAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowDetailYourReservationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateApprovalStatus(this IJongSnamServices operations, int? id = default(int?), ReservationApprovalRequest body = default(ReservationApprovalRequest))
            {
                return operations.UpdateApprovalStatusAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateApprovalStatusAsync(this IJongSnamServices operations, int? id = default(int?), ReservationApprovalRequest body = default(ReservationApprovalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApprovalStatusWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateReservation(this IJongSnamServices operations, ReservationRequest body = default(ReservationRequest))
            {
                return operations.CreateReservationAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateReservationAsync(this IJongSnamServices operations, ReservationRequest body = default(ReservationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReservationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object DeleteReservation(this IJongSnamServices operations, int id)
            {
                return operations.DeleteReservationAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteReservationAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteReservationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetReviewByStoreId(this IJongSnamServices operations, int storeId, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetReviewByStoreIdAsync(storeId, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReviewByStoreIdAsync(this IJongSnamServices operations, int storeId, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReviewByStoreIdWithHttpMessagesAsync(storeId, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AddReview(this IJongSnamServices operations, ReviewRequest body = default(ReviewRequest))
            {
                return operations.AddReviewAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddReviewAsync(this IJongSnamServices operations, ReviewRequest body = default(ReviewRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddReviewWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetStores(this IJongSnamServices operations, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetStoresAsync(currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetStoresAsync(this IJongSnamServices operations, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStoresWithHttpMessagesAsync(currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AddStore(this IJongSnamServices operations, StoreRequest body = default(StoreRequest))
            {
                return operations.AddStoreAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddStoreAsync(this IJongSnamServices operations, StoreRequest body = default(StoreRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddStoreWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetStoreById(this IJongSnamServices operations, int id)
            {
                return operations.GetStoreByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetStoreByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStoreByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateStore(this IJongSnamServices operations, int id, UpdateStoreRequest body = default(UpdateStoreRequest))
            {
                return operations.UpdateStoreAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateStoreAsync(this IJongSnamServices operations, int id, UpdateStoreRequest body = default(UpdateStoreRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStoreWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetYourStores(this IJongSnamServices operations, int ownerId, int? currentPage = default(int?), int? pageSize = default(int?))
            {
                return operations.GetYourStoresAsync(ownerId, currentPage, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerId'>
            /// </param>
            /// <param name='currentPage'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetYourStoresAsync(this IJongSnamServices operations, int ownerId, int? currentPage = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetYourStoresWithHttpMessagesAsync(ownerId, currentPage, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUsers(this IJongSnamServices operations)
            {
                return operations.GetUsersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUsersAsync(this IJongSnamServices operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetUserById(this IJongSnamServices operations, int id)
            {
                return operations.GetUserByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserByIdAsync(this IJongSnamServices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object ChangePassword(this IJongSnamServices operations, int id, ChangePasswordRequest body = default(ChangePasswordRequest))
            {
                return operations.ChangePasswordAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangePasswordAsync(this IJongSnamServices operations, int id, ChangePasswordRequest body = default(ChangePasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangePasswordWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateUser(this IJongSnamServices operations, int id, UpdateUserRequest body = default(UpdateUserRequest))
            {
                return operations.UpdateUserAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync(this IJongSnamServices operations, int id, UpdateUserRequest body = default(UpdateUserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<WeatherForecast> Get(this IJongSnamServices operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WeatherForecast>> GetAsync(this IJongSnamServices operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
